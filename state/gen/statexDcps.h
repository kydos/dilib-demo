//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: statexDcps.h
//  Source: gen/statexDcps.idl
//  Generated: Tue Jul 21 00:20:06 2015
//  OpenSplice V6.5.0
//  
//******************************************************************
#ifndef _STATEXDCPS_H_
#define _STATEXDCPS_H_
#ifndef OPENSPLICE_ISOCXX_PSM
#define OPENSPLICE_ISOCXX_PSM
#endif

#include "sacpp_mapping.h"
#include "dds_dcps.h"
#include "statex.h"


namespace dilib
{
   namespace demo
   {

      class DevicePositionTypeSupportInterface;

      typedef DevicePositionTypeSupportInterface * DevicePositionTypeSupportInterface_ptr;
      typedef DDS_DCPSInterface_var < DevicePositionTypeSupportInterface> DevicePositionTypeSupportInterface_var;
      typedef DDS_DCPSInterface_out < DevicePositionTypeSupportInterface> DevicePositionTypeSupportInterface_out;


      class DevicePositionDataWriter;

      typedef DevicePositionDataWriter * DevicePositionDataWriter_ptr;
      typedef DDS_DCPSInterface_var < DevicePositionDataWriter> DevicePositionDataWriter_var;
      typedef DDS_DCPSInterface_out < DevicePositionDataWriter> DevicePositionDataWriter_out;


      class DevicePositionDataReader;

      typedef DevicePositionDataReader * DevicePositionDataReader_ptr;
      typedef DDS_DCPSInterface_var < DevicePositionDataReader> DevicePositionDataReader_var;
      typedef DDS_DCPSInterface_out < DevicePositionDataReader> DevicePositionDataReader_out;


      class DevicePositionDataReaderView;

      typedef DevicePositionDataReaderView * DevicePositionDataReaderView_ptr;
      typedef DDS_DCPSInterface_var < DevicePositionDataReaderView> DevicePositionDataReaderView_var;
      typedef DDS_DCPSInterface_out < DevicePositionDataReaderView> DevicePositionDataReaderView_out;

      struct DevicePositionSeq_uniq_ {};
      typedef DDS_DCPSUVLSeq < DevicePosition, struct DevicePositionSeq_uniq_> DevicePositionSeq;
      typedef DDS_DCPSSequence_var < DevicePositionSeq> DevicePositionSeq_var;
      typedef DDS_DCPSSequence_out < DevicePositionSeq> DevicePositionSeq_out;
      class DevicePositionTypeSupportInterface
      :
         virtual public DDS::TypeSupport
      { 
      public:
         typedef DevicePositionTypeSupportInterface_ptr _ptr_type;
         typedef DevicePositionTypeSupportInterface_var _var_type;

         static DevicePositionTypeSupportInterface_ptr _duplicate (DevicePositionTypeSupportInterface_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static DevicePositionTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
         static DevicePositionTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static DevicePositionTypeSupportInterface_ptr _nil () { return 0; }
         static const char * _local_id;
         DevicePositionTypeSupportInterface_ptr _this () { return this; }


      protected:
         DevicePositionTypeSupportInterface () {};
         ~DevicePositionTypeSupportInterface () {};
      private:
         DevicePositionTypeSupportInterface (const DevicePositionTypeSupportInterface &);
         DevicePositionTypeSupportInterface & operator = (const DevicePositionTypeSupportInterface &);
      };

      class DevicePositionDataWriter
      :
         virtual public DDS::DataWriter
      { 
      public:
         typedef DevicePositionDataWriter_ptr _ptr_type;
         typedef DevicePositionDataWriter_var _var_type;

         static DevicePositionDataWriter_ptr _duplicate (DevicePositionDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static DevicePositionDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static DevicePositionDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static DevicePositionDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         DevicePositionDataWriter_ptr _this () { return this; }

         virtual DDS::LongLong register_instance (const DevicePosition& instance_data) = 0;
         virtual DDS::LongLong register_instance_w_timestamp (const DevicePosition& instance_data, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long unregister_instance (const DevicePosition& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long unregister_instance_w_timestamp (const DevicePosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long write (const DevicePosition& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long write_w_timestamp (const DevicePosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long dispose (const DevicePosition& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long dispose_w_timestamp (const DevicePosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long writedispose (const DevicePosition& instance_data, DDS::LongLong handle) = 0;
         virtual DDS::Long writedispose_w_timestamp (const DevicePosition& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
         virtual DDS::Long get_key_value (DevicePosition& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const DevicePosition& instance_data) = 0;

      protected:
         DevicePositionDataWriter () {};
         ~DevicePositionDataWriter () {};
      private:
         DevicePositionDataWriter (const DevicePositionDataWriter &);
         DevicePositionDataWriter & operator = (const DevicePositionDataWriter &);
      };

      class DevicePositionDataReader
      :
         virtual public DDS::DataReader
      { 
      public:
         typedef DevicePositionDataReader_ptr _ptr_type;
         typedef DevicePositionDataReader_var _var_type;

         static DevicePositionDataReader_ptr _duplicate (DevicePositionDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static DevicePositionDataReader_ptr _narrow (DDS::Object_ptr obj);
         static DevicePositionDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static DevicePositionDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         DevicePositionDataReader_ptr _this () { return this; }

         virtual DDS::Long read (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (DevicePosition& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (DevicePosition& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (DevicePosition& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const DevicePosition& instance) = 0;

      protected:
         DevicePositionDataReader () {};
         ~DevicePositionDataReader () {};
      private:
         DevicePositionDataReader (const DevicePositionDataReader &);
         DevicePositionDataReader & operator = (const DevicePositionDataReader &);
      };

      class DevicePositionDataReaderView
      :
         virtual public DDS::DataReaderView
      { 
      public:
         typedef DevicePositionDataReaderView_ptr _ptr_type;
         typedef DevicePositionDataReaderView_var _var_type;

         static DevicePositionDataReaderView_ptr _duplicate (DevicePositionDataReaderView_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static DevicePositionDataReaderView_ptr _narrow (DDS::Object_ptr obj);
         static DevicePositionDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static DevicePositionDataReaderView_ptr _nil () { return 0; }
         static const char * _local_id;
         DevicePositionDataReaderView_ptr _this () { return this; }

         virtual DDS::Long read (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_w_condition (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_w_condition (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long read_next_sample (DevicePosition& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long take_next_sample (DevicePosition& received_data, DDS::SampleInfo& sample_info) = 0;
         virtual DDS::Long read_instance (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_instance (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long take_next_instance (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
         virtual DDS::Long read_next_instance_w_condition (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long take_next_instance_w_condition (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
         virtual DDS::Long return_loan (DevicePositionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
         virtual DDS::Long get_key_value (DevicePosition& key_holder, DDS::LongLong handle) = 0;
         virtual DDS::LongLong lookup_instance (const DevicePosition& instance) = 0;

      protected:
         DevicePositionDataReaderView () {};
         ~DevicePositionDataReaderView () {};
      private:
         DevicePositionDataReaderView (const DevicePositionDataReaderView &);
         DevicePositionDataReaderView & operator = (const DevicePositionDataReaderView &);
      };

   }
}




#endif
