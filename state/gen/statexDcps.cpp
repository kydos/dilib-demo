//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: statexDcps.cpp
//  Source: gen/statexDcps.idl
//  Generated: Tue Jul 21 00:20:06 2015
//  OpenSplice V6.5.0
//  
//******************************************************************

#include "statexDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < dilib::demo::DevicePosition, struct DevicePositionSeq_uniq_>;
#endif

const char * dilib::demo::DevicePositionTypeSupportInterface::_local_id = "IDL:dilib/demo/DevicePositionTypeSupportInterface:1.0";

dilib::demo::DevicePositionTypeSupportInterface_ptr dilib::demo::DevicePositionTypeSupportInterface::_duplicate (dilib::demo::DevicePositionTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean dilib::demo::DevicePositionTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, dilib::demo::DevicePositionTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

dilib::demo::DevicePositionTypeSupportInterface_ptr dilib::demo::DevicePositionTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   dilib::demo::DevicePositionTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (dilib::demo::DevicePositionTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < dilib::demo::DevicePositionTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

dilib::demo::DevicePositionTypeSupportInterface_ptr dilib::demo::DevicePositionTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   dilib::demo::DevicePositionTypeSupportInterface_ptr result;
   result = dynamic_cast < dilib::demo::DevicePositionTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * dilib::demo::DevicePositionDataWriter::_local_id = "IDL:dilib/demo/DevicePositionDataWriter:1.0";

dilib::demo::DevicePositionDataWriter_ptr dilib::demo::DevicePositionDataWriter::_duplicate (dilib::demo::DevicePositionDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean dilib::demo::DevicePositionDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, dilib::demo::DevicePositionDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

dilib::demo::DevicePositionDataWriter_ptr dilib::demo::DevicePositionDataWriter::_narrow (DDS::Object_ptr p)
{
   dilib::demo::DevicePositionDataWriter_ptr result = NULL;
   if (p && p->_is_a (dilib::demo::DevicePositionDataWriter::_local_id))
   {
      result = dynamic_cast < dilib::demo::DevicePositionDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

dilib::demo::DevicePositionDataWriter_ptr dilib::demo::DevicePositionDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   dilib::demo::DevicePositionDataWriter_ptr result;
   result = dynamic_cast < dilib::demo::DevicePositionDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * dilib::demo::DevicePositionDataReader::_local_id = "IDL:dilib/demo/DevicePositionDataReader:1.0";

dilib::demo::DevicePositionDataReader_ptr dilib::demo::DevicePositionDataReader::_duplicate (dilib::demo::DevicePositionDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean dilib::demo::DevicePositionDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, dilib::demo::DevicePositionDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

dilib::demo::DevicePositionDataReader_ptr dilib::demo::DevicePositionDataReader::_narrow (DDS::Object_ptr p)
{
   dilib::demo::DevicePositionDataReader_ptr result = NULL;
   if (p && p->_is_a (dilib::demo::DevicePositionDataReader::_local_id))
   {
      result = dynamic_cast < dilib::demo::DevicePositionDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

dilib::demo::DevicePositionDataReader_ptr dilib::demo::DevicePositionDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   dilib::demo::DevicePositionDataReader_ptr result;
   result = dynamic_cast < dilib::demo::DevicePositionDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * dilib::demo::DevicePositionDataReaderView::_local_id = "IDL:dilib/demo/DevicePositionDataReaderView:1.0";

dilib::demo::DevicePositionDataReaderView_ptr dilib::demo::DevicePositionDataReaderView::_duplicate (dilib::demo::DevicePositionDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean dilib::demo::DevicePositionDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, dilib::demo::DevicePositionDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

dilib::demo::DevicePositionDataReaderView_ptr dilib::demo::DevicePositionDataReaderView::_narrow (DDS::Object_ptr p)
{
   dilib::demo::DevicePositionDataReaderView_ptr result = NULL;
   if (p && p->_is_a (dilib::demo::DevicePositionDataReaderView::_local_id))
   {
      result = dynamic_cast < dilib::demo::DevicePositionDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

dilib::demo::DevicePositionDataReaderView_ptr dilib::demo::DevicePositionDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   dilib::demo::DevicePositionDataReaderView_ptr result;
   result = dynamic_cast < dilib::demo::DevicePositionDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



