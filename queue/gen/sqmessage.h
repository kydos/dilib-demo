//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sqmessage.h
//  Source: sqmessage.idl
//  Generated: Mon Jul 20 23:56:23 2015
//  OpenSplice V6.5.0
//  
//******************************************************************
#ifndef _SQMESSAGE_H_
#define _SQMESSAGE_H_
#ifndef OPENSPLICE_ISOCXX_PSM
#define OPENSPLICE_ISOCXX_PSM
#endif

#include "sacpp_mapping.h"
#include <dds/core/ddscore.hpp>


namespace dilib
{
   namespace demo
   {
      class Message;

      class Message OSPL_DDS_FINAL
      {
      public:
            Message() {}
            explicit Message(
                        const ::std::string& key,
                        const ::std::string& body)            :
                                    key_(key),
                                    body_(body) {}
#ifdef OSPL_DDS_CXX11
#  ifdef OSPL_CXX11_NO_FUNCTION_DEFAULTS
            Message(const Message& _other)
            :
                                    key_(_other.key_),
                                    body_(_other.body_)
            {}
            Message(Message&& _other)
            :
                                    key_(::std::move(_other.key_)),
                                    body_(::std::move(_other.body_))
            {}
            Message& operator=(Message&& _other)
            {
                        if (this != &_other)
                        {
                                    key_ = ::std::move(_other.key_);
                                    body_ = ::std::move(_other.body_);
                        }
                        return *this;
            }
            Message& operator=(const Message& _other)
            {
                        if (this != &_other)
                        {
                                    key_ = _other.key_;
                                    body_ = _other.body_;
                        }
                        return *this;
            }
#  else
            Message(const Message& _other) = default;
            Message(Message&& _other) = default;
            Message& operator=(Message&& _other) = default;
            Message& operator=(const Message& _other) = default;
#  endif
#endif
            const ::std::string& key() const { return this->key_; }
            ::std::string& key() { return this->key_; }
            void key(const ::std::string& _val_) { this->key_ = _val_; }
#ifdef OSPL_DDS_CXX11
            void key(::std::string&& _val_) { this->key_ = _val_; }
#endif
            const ::std::string& body() const { return this->body_; }
            ::std::string& body() { return this->body_; }
            void body(const ::std::string& _val_) { this->body_ = _val_; }
#ifdef OSPL_DDS_CXX11
            void body(::std::string&& _val_) { this->body_ = _val_; }
#endif
            bool operator==(const Message& _other) const
            {
                        return key_ == _other.key_ &&
                        body_ == _other.body_;
            }
            bool operator!=(const Message& other) const
            {
                        return !(*this == other);
            }
            ::std::string key_;
            ::std::string body_;
      };

   }
}




#endif
